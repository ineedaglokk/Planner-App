import Foundation
import SwiftData

// MARK: - Sample Data Generator

/// –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
final class SampleData {
    
    // MARK: - Main Sample Data Creator
    
    /// –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    static func createSampleData(in context: ModelContext) {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        clearAllData(in: context)
        
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        let user = createSampleUser()
        context.insert(user)
        
        let categories = createSampleCategories(for: user)
        categories.forEach { context.insert($0) }
        
        let habits = createSampleHabits(for: user, categories: categories)
        habits.forEach { context.insert($0) }
        
        let tasks = createSampleTasks(for: user, categories: categories)
        tasks.forEach { context.insert($0) }
        
        let goals = createSampleGoals(for: user, categories: categories)
        goals.forEach { context.insert($0) }
        
        let transactions = createSampleTransactions(for: user, categories: categories)
        transactions.forEach { context.insert($0) }
        
        let budgets = createSampleBudgets(for: user, categories: categories)
        budgets.forEach { context.insert($0) }
        
        let achievements = createSampleAchievements(for: user)
        achievements.forEach { context.insert($0) }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        do {
            try context.save()
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö: \(error)")
        }
        
        print("‚úÖ –û–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    }
    
    // MARK: - Individual Data Creators
    
    /// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static func createSampleUser() -> User {
        let user = User(
            name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤",
            email: "alex.petrov@example.com"
        )
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
        user.level = 12
        user.totalPoints = 3450
        user.currentExperience = 750
        user.experienceToNextLevel = 1200
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user.currentStreak = 15
        user.longestStreak = 42
        user.totalHabitsCompleted = 234
        user.totalTasksCompleted = 567
        user.totalDaysActive = 89
        
        return user
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    static func createSampleCategories(for user: User) -> [Category] {
        var categories: [Category] = []
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫
        let habitCategories = [
            Category(name: "üí™ –ó–¥–æ—Ä–æ–≤—å–µ", description: "–°–ø–æ—Ä—Ç, –ø–∏—Ç–∞–Ω–∏–µ, —Å–æ–Ω", icon: "heart.circle", color: "#FF3B30", type: .habit),
            Category(name: "üß† –†–∞–∑–≤–∏—Ç–∏–µ", description: "–û–±—É—á–µ–Ω–∏–µ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç", icon: "brain.head.profile", color: "#5856D6", type: .habit),
            Category(name: "üíº –†–∞–±–æ—Ç–∞", description: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏", icon: "briefcase.circle", color: "#007AFF", type: .habit),
            Category(name: "üè† –î–æ–º", description: "–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞ –∏ –±—ã—Ç", icon: "house.circle", color: "#32D74B", type: .habit)
        ]
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á
        let taskCategories = [
            Category(name: "üî• –°—Ä–æ—á–Ω—ã–µ", description: "–¢—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è", icon: "exclamationmark.circle", color: "#FF3B30", type: .task),
            Category(name: "üíº –†–∞–±–æ—á–∏–µ", description: "–°–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–±–æ—Ç–æ–π", icon: "briefcase", color: "#007AFF", type: .task),
            Category(name: "üë§ –õ–∏—á–Ω—ã–µ", description: "–õ–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏", icon: "person.circle", color: "#32D74B", type: .task),
            Category(name: "üõí –ü–æ–∫—É–ø–∫–∏", description: "–ß—Ç–æ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å", icon: "cart.circle", color: "#FF9500", type: .task)
        ]
        
        // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let financeCategories = [
            Category(name: "üí∞ –î–æ—Ö–æ–¥—ã", description: "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤", icon: "arrow.up.circle", color: "#32D74B", type: .finance),
            Category(name: "üõçÔ∏è –ü–æ–∫—É–ø–∫–∏", description: "–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–æ–∫—É–ø–∫–∏", icon: "bag.circle", color: "#FF9500", type: .finance),
            Category(name: "üçΩÔ∏è –ï–¥–∞", description: "–ü–∏—Ç–∞–Ω–∏–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", icon: "fork.knife.circle", color: "#FF6B6B", type: .finance),
            Category(name: "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", description: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", icon: "car.circle", color: "#4ECDC4", type: .finance),
            Category(name: "üéØ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", description: "–û—Ç–¥—ã—Ö –∏ —Ö–æ–±–±–∏", icon: "gamecontroller.circle", color: "#A8E6CF", type: .finance)
        ]
        
        categories.append(contentsOf: habitCategories)
        categories.append(contentsOf: taskCategories)
        categories.append(contentsOf: financeCategories)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories.forEach { $0.user = user }
        
        return categories
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑—Ü—ã –ø—Ä–∏–≤—ã—á–µ–∫
    static func createSampleHabits(for user: User, categories: [Category]) -> [Habit] {
        let healthCategory = categories.first { $0.name.contains("–ó–¥–æ—Ä–æ–≤—å–µ") }
        let developmentCategory = categories.first { $0.name.contains("–†–∞–∑–≤–∏—Ç–∏–µ") }
        let workCategory = categories.first { $0.name.contains("–†–∞–±–æ—Ç–∞") && $0.type == .habit }
        
        let sampleHabits = [
            // –ó–¥–æ—Ä–æ–≤—å–µ
            Habit(name: "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞", description: "20 –º–∏–Ω—É—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π", icon: "figure.walk", color: "#FF3B30", frequency: .daily, targetValue: 20, unit: "–º–∏–Ω—É—Ç", category: healthCategory),
            Habit(name: "–í—ã–ø–∏—Ç—å –≤–æ–¥—ã", description: "2 –ª–∏—Ç—Ä–∞ —á–∏—Å—Ç–æ–π –≤–æ–¥—ã –≤ –¥–µ–Ω—å", icon: "drop", color: "#007AFF", frequency: .daily, targetValue: 8, unit: "—Å—Ç–∞–∫–∞–Ω–æ–≤", category: healthCategory),
            Habit(name: "–ü—Ä–æ–≥—É–ª–∫–∞", description: "–í–µ—á–µ—Ä–Ω—è—è –ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ", icon: "figure.walk.motion", color: "#32D74B", frequency: .daily, targetValue: 30, unit: "–º–∏–Ω—É—Ç", category: healthCategory),
            
            // –†–∞–∑–≤–∏—Ç–∏–µ
            Habit(name: "–ß—Ç–µ–Ω–∏–µ", description: "–ß—Ç–µ–Ω–∏–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–ª–∏ —Ä–∞–∑–≤–∏–≤–∞—é—â–µ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã", icon: "book", color: "#5856D6", frequency: .daily, targetValue: 30, unit: "–º–∏–Ω—É—Ç", category: developmentCategory),
            Habit(name: "–ú–µ–¥–∏—Ç–∞—Ü–∏—è", description: "–ü—Ä–∞–∫—Ç–∏–∫–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏", icon: "leaf", color: "#32D74B", frequency: .daily, targetValue: 15, unit: "–º–∏–Ω—É—Ç", category: developmentCategory),
            Habit(name: "–ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞", description: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", icon: "textbook", color: "#FF9500", frequency: .daily, targetValue: 20, unit: "–º–∏–Ω—É—Ç", category: developmentCategory),
            
            // –†–∞–±–æ—Ç–∞
            Habit(name: "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è", description: "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–∞ –¥–µ–Ω—å", icon: "calendar", color: "#007AFF", frequency: .daily, targetValue: 1, unit: "—Ä–∞–∑", category: workCategory),
            Habit(name: "–ü—Ä–æ–≤–µ—Ä–∫–∞ email", description: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º", icon: "envelope", color: "#FF9500", frequency: .workdays, targetValue: 2, unit: "—Ä–∞–∑–∞", category: workCategory)
        ]
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏
        sampleHabits.forEach { habit in
            habit.user = user
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π —Å —Ä–∞–∑–Ω–æ–π —Å—Ç–µ–ø–µ–Ω—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            let calendar = Calendar.current
            for i in 0..<30 {
                guard let date = calendar.date(byAdding: .day, value: -i, to: Date()) else { continue }
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫
                let shouldComplete = Bool.random() && (i < 7 || Double.random(in: 0...1) > 0.3)
                
                if shouldComplete && habit.shouldTrackForDate(date) {
                    let randomValue = Int.random(in: max(1, habit.targetValue/2)...habit.targetValue)
                    let entry = HabitEntry(habit: habit, date: date, value: randomValue)
                    habit.entries.append(entry)
                }
            }
        }
        
        return sampleHabits
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑—Ü—ã –∑–∞–¥–∞—á
    static func createSampleTasks(for user: User, categories: [Category]) -> [Task] {
        let urgentCategory = categories.first { $0.name.contains("–°—Ä–æ—á–Ω—ã–µ") }
        let workCategory = categories.first { $0.name.contains("–†–∞–±–æ—á–∏–µ") }
        let personalCategory = categories.first { $0.name.contains("–õ–∏—á–Ω—ã–µ") }
        let shoppingCategory = categories.first { $0.name.contains("–ü–æ–∫—É–ø–∫–∏") }
        
        let calendar = Calendar.current
        
        let sampleTasks = [
            // –°—Ä–æ—á–Ω—ã–µ
            Task(title: "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç", description: "–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞", priority: .urgent, dueDate: calendar.date(byAdding: .day, value: 1, to: Date()), category: urgentCategory),
            Task(title: "–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", description: "–°—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É", priority: .high, dueDate: calendar.date(byAdding: .hour, value: 4, to: Date()), category: urgentCategory),
            
            // –†–∞–±–æ—á–∏–µ
            Task(title: "–ö–æ–¥-—Ä–µ–≤—å—é", description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –∫–æ–ª–ª–µ–≥–∏", priority: .medium, dueDate: calendar.date(byAdding: .day, value: 2, to: Date()), category: workCategory),
            Task(title: "–û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é", description: "–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é", priority: .low, category: workCategory),
            Task(title: "–°–æ–∑–≤–æ–Ω —Å –∫–æ–º–∞–Ω–¥–æ–π", description: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∫–æ–º–∞–Ω–¥—ã", priority: .medium, dueDate: calendar.date(byAdding: .day, value: 3, to: Date()), category: workCategory),
            
            // –õ–∏—á–Ω—ã–µ
            Task(title: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É", description: "–ü–ª–∞–Ω–æ–≤—ã–π –æ—Å–º–æ—Ç—Ä —É —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞", priority: .medium, dueDate: calendar.date(byAdding: .week, value: 1, to: Date()), category: personalCategory),
            Task(title: "–ü–æ–¥–∞—Ä–æ–∫ –º–∞–º–µ", description: "–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", priority: .high, dueDate: calendar.date(byAdding: .week, value: 2, to: Date()), category: personalCategory),
            Task(title: "–ó–∞–ø—Ä–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É", description: "–ó–∞–µ—Ö–∞—Ç—å –Ω–∞ –ê–ó–°", priority: .low, category: personalCategory),
            
            // –ü–æ–∫—É–ø–∫–∏
            Task(title: "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é", description: "–ú–æ–ª–æ–∫–æ, —Ö–ª–µ–±, –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã", priority: .medium, category: shoppingCategory),
            Task(title: "–ù–æ–≤—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏", description: "–î–ª—è –∑–∞–Ω—è—Ç–∏–π —Å–ø–æ—Ä—Ç–æ–º", priority: .low, category: shoppingCategory)
        ]
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ª—É—á–∞–π–Ω–æ –æ—Ç–º–µ—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        sampleTasks.forEach { task in
            task.user = user
            
            // 30% —à–∞–Ω—Å —á—Ç–æ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            if Double.random(in: 0...1) < 0.3 {
                task.markCompleted()
            }
        }
        
        return sampleTasks
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑—Ü—ã —Ü–µ–ª–µ–π
    static func createSampleGoals(for user: User, categories: [Category]) -> [Goal] {
        let calendar = Calendar.current
        
        let sampleGoals = [
            Goal(
                title: "–ò–∑—É—á–∏—Ç—å SwiftUI",
                description: "–û—Å–≤–æ–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ SwiftUI",
                priority: .high,
                type: .education,
                targetDate: calendar.date(byAdding: .month, value: 4, to: Date()),
                targetValue: 100,
                progressType: .percentage
            ),
            Goal(
                title: "–°–±—Ä–æ—Å–∏—Ç—å 5 –∫–≥",
                description: "–ü—Ä–∏–≤–µ—Å—Ç–∏ —Å–µ–±—è –≤ —Ñ–æ—Ä–º—É –∫ –ª–µ—Ç—É",
                priority: .medium,
                type: .health,
                targetDate: calendar.date(byAdding: .month, value: 6, to: Date()),
                targetValue: 5,
                unit: "–∫–≥",
                progressType: .numeric
            ),
            Goal(
                title: "–ù–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –æ—Ç–ø—É—Å–∫",
                description: "–ù–∞–∫–æ–ø–∏—Ç—å 200,000 —Ä—É–±–ª–µ–π –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ",
                priority: .medium,
                type: .financial,
                targetDate: calendar.date(byAdding: .month, value: 8, to: Date()),
                targetValue: 200000,
                unit: "‚ÇΩ",
                progressType: .numeric
            ),
            Goal(
                title: "–ü—Ä–æ—á–∏—Ç–∞—Ç—å 12 –∫–Ω–∏–≥",
                description: "–ü–æ –∫–Ω–∏–≥–µ –≤ –º–µ—Å—è—Ü",
                priority: .low,
                type: .personal,
                targetDate: calendar.date(byAdding: .year, value: 1, to: Date()),
                targetValue: 12,
                unit: "–∫–Ω–∏–≥",
                progressType: .numeric
            )
        ]
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        sampleGoals.forEach { goal in
            goal.user = user
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            switch goal.title {
            case "–ò–∑—É—á–∏—Ç—å SwiftUI":
                goal.updateProgress(45)
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ö–∏
                let milestone1 = GoalMilestone(title: "–û—Å–Ω–æ–≤—ã", targetProgress: 0.25)
                let milestone2 = GoalMilestone(title: "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", targetProgress: 0.5)
                let milestone3 = GoalMilestone(title: "–ù–∞–≤–∏–≥–∞—Ü–∏—è", targetProgress: 0.75)
                goal.addMilestone(milestone1)
                goal.addMilestone(milestone2)
                goal.addMilestone(milestone3)
                milestone1.markAchieved()
                
            case "–°–±—Ä–æ—Å–∏—Ç—å 5 –∫–≥":
                goal.updateProgress(2)
                
            case "–ù–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –æ—Ç–ø—É—Å–∫":
                goal.updateProgress(75000)
                
            case "–ü—Ä–æ—á–∏—Ç–∞—Ç—å 12 –∫–Ω–∏–≥":
                goal.updateProgress(4)
                
            default:
                break
            }
        }
        
        return sampleGoals
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    static func createSampleTransactions(for user: User, categories: [Category]) -> [Transaction] {
        let incomeCategory = categories.first { $0.name.contains("–î–æ—Ö–æ–¥—ã") }
        let foodCategory = categories.first { $0.name.contains("–ï–¥–∞") }
        let shoppingCategory = categories.first { $0.name.contains("–ü–æ–∫—É–ø–∫–∏") && $0.type == .finance }
        let transportCategory = categories.first { $0.name.contains("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç") }
        let entertainmentCategory = categories.first { $0.name.contains("–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è") }
        
        var transactions: [Transaction] = []
        let calendar = Calendar.current
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        for i in 0..<30 {
            guard let date = calendar.date(byAdding: .day, value: -i, to: Date()) else { continue }
            
            // –ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞
            if i == 28 {
                let salary = Transaction(
                    amount: 120000,
                    type: .income,
                    title: "–ó–∞—Ä–ø–ª–∞—Ç–∞",
                    description: "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã",
                    date: date,
                    category: incomeCategory,
                    account: "–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞"
                )
                salary.user = user
                transactions.append(salary)
            }
            
            // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –µ–¥—É
            if Bool.random() { // –ù–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                let foodExpenses = [
                    ("–ó–∞–≤—Ç—Ä–∞–∫", Decimal.random(in: 200...500)),
                    ("–û–±–µ–¥", Decimal.random(in: 400...800)),
                    ("–£–∂–∏–Ω", Decimal.random(in: 300...700)),
                    ("–ö–æ—Ñ–µ", Decimal.random(in: 150...300))
                ]
                
                for (title, amount) in foodExpenses.prefix(Int.random(in: 1...3)) {
                    let transaction = Transaction(
                        amount: amount,
                        type: .expense,
                        title: title,
                        date: date,
                        category: foodCategory,
                        account: "–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞"
                    )
                    transaction.user = user
                    transactions.append(transaction)
                }
            }
            
            // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            if i % 2 == 0 { // –ß–µ—Ä–µ–∑ –¥–µ–Ω—å
                let transport = Transaction(
                    amount: Decimal.random(in: 100...200),
                    type: .expense,
                    title: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                    description: "–ú–µ—Ç—Ä–æ/–∞–≤—Ç–æ–±—É—Å",
                    date: date,
                    category: transportCategory,
                    account: "–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞"
                )
                transport.user = user
                transactions.append(transport)
            }
        }
        
        // –ö—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
        let bigPurchases = [
            ("–ü—Ä–æ–¥—É–∫—Ç—ã", Decimal(5500), "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∑–∞–∫—É–ø–∫–∞", shoppingCategory),
            ("–û–¥–µ–∂–¥–∞", Decimal(8900), "–ù–æ–≤–∞—è –∫—É—Ä—Ç–∫–∞", shoppingCategory),
            ("–ö–Ω–∏–≥–∏", Decimal(2100), "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", entertainmentCategory),
            ("–ö–∏–Ω–æ", Decimal(600), "–ë–∏–ª–µ—Ç—ã –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä", entertainmentCategory),
            ("–°–ø–æ—Ä—Ç–∑–∞–ª", Decimal(3000), "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü", entertainmentCategory)
        ]
        
        for (title, amount, description, category) in bigPurchases {
            let transaction = Transaction(
                amount: amount,
                type: .expense,
                title: title,
                description: description,
                date: calendar.date(byAdding: .day, value: -Int.random(in: 1...15), to: Date()) ?? Date(),
                category: category,
                account: "–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞"
            )
            transaction.user = user
            transactions.append(transaction)
        }
        
        return transactions
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑—Ü—ã –±—é–¥–∂–µ—Ç–æ–≤
    static func createSampleBudgets(for user: User, categories: [Category]) -> [Budget] {
        let foodCategory = categories.first { $0.name.contains("–ï–¥–∞") }
        let shoppingCategory = categories.first { $0.name.contains("–ü–æ–∫—É–ø–∫–∏") && $0.type == .finance }
        let entertainmentCategory = categories.first { $0.name.contains("–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è") }
        
        let sampleBudgets = [
            Budget(
                name: "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç",
                description: "–û—Å–Ω–æ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç –Ω–∞ –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã",
                limit: 60000,
                period: .monthly
            ),
            Budget(
                name: "–ü–∏—Ç–∞–Ω–∏–µ",
                description: "–ë—é–¥–∂–µ—Ç –Ω–∞ –µ–¥—É –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
                limit: 20000,
                period: .monthly,
                category: foodCategory
            ),
            Budget(
                name: "–ü–æ–∫—É–ø–∫–∏",
                description: "–û–¥–µ–∂–¥–∞, —Ç–µ—Ö–Ω–∏–∫–∞, —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞",
                limit: 15000,
                period: .monthly,
                category: shoppingCategory
            ),
            Budget(
                name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
                description: "–ö–∏–Ω–æ, —Å–ø–æ—Ä—Ç, —Ö–æ–±–±–∏",
                limit: 8000,
                period: .monthly,
                category: entertainmentCategory
            )
        ]
        
        sampleBudgets.forEach { $0.user = user }
        
        return sampleBudgets
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    static func createSampleAchievements(for user: User) -> [Achievement] {
        let achievements = Achievement.createDefaultAchievements()
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        let unlockedTitles = [
            "–ü–µ—Ä–≤—ã–π —à–∞–≥",
            "–ù–µ–¥–µ–ª—è —Å–∏–ª—ã –≤–æ–ª–∏",
            "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å",
            "–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π",
            "–ù–æ–≤–∏—á–æ–∫",
            "–ü–µ—Ä–≤—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è"
        ]
        
        achievements.forEach { achievement in
            achievement.user = user
            
            if unlockedTitles.contains(achievement.title) {
                achievement.updateProgressFromUser(user)
                if achievement.isReadyToUnlock {
                    achievement.unlock()
                }
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                achievement.updateProgressFromUser(user)
            }
        }
        
        return achievements
    }
    
    // MARK: - Utility Methods
    
    /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    private static func clearAllData(in context: ModelContext) {
        do {
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
            try context.delete(model: User.self)
            try context.delete(model: Category.self)
            try context.delete(model: Habit.self)
            try context.delete(model: HabitEntry.self)
            try context.delete(model: Task.self)
            try context.delete(model: Goal.self)
            try context.delete(model: GoalMilestone.self)
            try context.delete(model: GoalProgress.self)
            try context.delete(model: Transaction.self)
            try context.delete(model: Budget.self)
            try context.delete(model: Achievement.self)
            
            try context.save()
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: \(error)")
        }
    }
}

// MARK: - Extensions for Random Data

private extension Decimal {
    static func random(in range: ClosedRange<Double>) -> Decimal {
        let randomDouble = Double.random(in: range)
        return Decimal(randomDouble)
    }
} 