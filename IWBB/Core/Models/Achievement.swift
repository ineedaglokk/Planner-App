import Foundation
import SwiftData

// MARK: - Achievement Model

@Model
final class Achievement: CloudKitSyncable, Timestampable {
    
    // MARK: - Properties
    
    @Attribute(.unique) var id: UUID
    var title: String
    var description: String
    var type: AchievementType
    var category: AchievementCategory
    var rarity: AchievementRarity
    
    // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    var criteria: AchievementCriteria
    var targetValue: Double // –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    var currentProgress: Double // –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    
    // –°—Ç–∞—Ç—É—Å
    var isUnlocked: Bool
    var isSecret: Bool // –°–∫—Ä—ã—Ç–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    var unlockedDate: Date?
    
    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    var icon: String // SF Symbol name
    var color: String // Hex color
    var badgeImage: String? // –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞—á–∫–∞
    
    // –ù–∞–≥—Ä–∞–¥—ã
    var pointsReward: Int
    var experienceReward: Int
    var unlockableContent: String? // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    var specialReward: String? // –û–ø–∏—Å–∞–Ω–∏–µ –æ—Å–æ–±–æ–π –Ω–∞–≥—Ä–∞–¥—ã
    
    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    var createdAt: Date
    var updatedAt: Date
    
    // CloudKit —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    var cloudKitRecordID: String?
    var needsSync: Bool
    var lastSynced: Date?
    
    // MARK: - Relationships
    
    var user: User?
    
    // MARK: - Initializers
    
    init(
        title: String,
        description: String,
        type: AchievementType,
        category: AchievementCategory = .general,
        rarity: AchievementRarity = .common,
        criteria: AchievementCriteria,
        targetValue: Double,
        pointsReward: Int = 0,
        experienceReward: Int = 0,
        isSecret: Bool = false
    ) {
        self.id = UUID()
        self.title = title
        self.description = description
        self.type = type
        self.category = category
        self.rarity = rarity
        self.criteria = criteria
        self.targetValue = targetValue
        self.currentProgress = 0.0
        self.pointsReward = pointsReward
        self.experienceReward = experienceReward
        self.isSecret = isSecret
        
        // –°—Ç–∞—Ç—É—Å
        self.isUnlocked = false
        
        // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        self.icon = type.defaultIcon
        self.color = rarity.color
        
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        let now = Date()
        self.createdAt = now
        self.updatedAt = now
        
        // CloudKit
        self.cloudKitRecordID = nil
        self.needsSync = true
        self.lastSynced = nil
    }
}

// MARK: - Achievement Extensions

extension Achievement: Validatable {
    func validate() throws {
        if title.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {
            throw ModelValidationError.emptyName
        }
        
        if targetValue <= 0 {
            throw ModelValidationError.missingRequiredField("–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        }
        
        if currentProgress < 0 {
            throw ModelValidationError.negativeAmount
        }
    }
}

extension Achievement {
    
    // MARK: - Computed Properties
    
    /// –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0.0 - 1.0)
    var progress: Double {
        guard targetValue > 0 else { return 0.0 }
        return min(currentProgress / targetValue, 1.0)
    }
    
    /// –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    var progressPercentage: Int {
        return Int(progress * 100)
    }
    
    /// –ì–æ—Ç–æ–≤–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
    var isReadyToUnlock: Bool {
        return !isUnlocked && progress >= 1.0
    }
    
    /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    var formattedProgress: String {
        switch criteria {
        case .streakDays, .completedHabits, .completedTasks, .completedGoals, .daysActive:
            return "\(Int(currentProgress)) –∏–∑ \(Int(targetValue))"
        case .totalPoints, .level:
            return "\(Int(currentProgress))/\(Int(targetValue))"
        case .savingsAmount, .spentAmount:
            return String(format: "%.0f –∏–∑ %.0f ‚ÇΩ", currentProgress, targetValue)
        case .custom:
            return "\(Int(currentProgress))/\(Int(targetValue))"
        }
    }
    
    /// –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ)
    var displayTitle: String {
        if isSecret && !isUnlocked {
            return "???"
        }
        return title
    }
    
    /// –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ)
    var displayDescription: String {
        if isSecret && !isUnlocked {
            return "–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"
        }
        return description
    }
    
    /// –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    var typeEmoji: String {
        return type.emoji
    }
    
    // MARK: - Achievement Management
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    func updateProgress(_ newProgress: Double, shouldAutoUnlock: Bool = true) {
        let oldProgress = currentProgress
        currentProgress = max(0, newProgress)
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ
        if shouldAutoUnlock && !isUnlocked && currentProgress >= targetValue {
            unlock()
        }
        
        updateTimestamp()
        markForSync()
    }
    
    /// –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ
    func incrementProgress(by value: Double, shouldAutoUnlock: Bool = true) {
        updateProgress(currentProgress + value, shouldAutoUnlock: shouldAutoUnlock)
    }
    
    /// –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    func unlock() {
        guard !isUnlocked else { return }
        
        isUnlocked = true
        unlockedDate = Date()
        
        // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if let user = user {
            user.addExperience(experienceReward)
            // user.addPoints(pointsReward) - –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤
        }
        
        updateTimestamp()
        markForSync()
    }
    
    /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    func reset() {
        isUnlocked = false
        unlockedDate = nil
        currentProgress = 0.0
        updateTimestamp()
        markForSync()
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    func checkCondition(for user: User) -> Bool {
        let currentValue = getCurrentValue(for: user)
        return currentValue >= targetValue
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏—è
    private func getCurrentValue(for user: User) -> Double {
        switch criteria {
        case .streakDays:
            return Double(user.currentStreak)
        case .completedHabits:
            return Double(user.totalHabitsCompleted)
        case .completedTasks:
            return Double(user.totalTasksCompleted)
        case .completedGoals:
            return Double(user.goals.filter { $0.isCompleted }.count)
        case .totalPoints:
            return Double(user.totalPoints)
        case .level:
            return Double(user.level)
        case .daysActive:
            return Double(user.totalDaysActive)
        case .savingsAmount:
            // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π (–¥–æ—Ö–æ–¥—ã - —Ä–∞—Å—Ö–æ–¥—ã)
            let income = user.transactions.filter { $0.type == .income }.reduce(0) { $0 + $1.convertedAmount }
            let expenses = user.transactions.filter { $0.type == .expense }.reduce(0) { $0 + $1.convertedAmount }
            return Double(income - expenses)
        case .spentAmount:
            // –û–±—â–∞—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞
            return Double(user.transactions.filter { $0.type == .expense }.reduce(0) { $0 + $1.convertedAmount })
        case .custom:
            return currentProgress // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        }
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    func updateProgressFromUser(_ user: User) {
        let newProgress = getCurrentValue(for: user)
        updateProgress(newProgress)
    }
}

// MARK: - Supporting Enums

enum AchievementType: String, Codable, CaseIterable {
    case habit = "habit"
    case task = "task"
    case goal = "goal"
    case finance = "finance"
    case streak = "streak"
    case level = "level"
    case social = "social"
    case milestone = "milestone"
    case special = "special"
    
    var displayName: String {
        switch self {
        case .habit: return "–ü—Ä–∏–≤—ã—á–∫–∏"
        case .task: return "–ó–∞–¥–∞—á–∏"
        case .goal: return "–¶–µ–ª–∏"
        case .finance: return "–§–∏–Ω–∞–Ω—Å—ã"
        case .streak: return "–°–µ—Ä–∏–∏"
        case .level: return "–£—Ä–æ–≤–µ–Ω—å"
        case .social: return "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ"
        case .milestone: return "–í–µ—Ö–∏"
        case .special: return "–û—Å–æ–±—ã–µ"
        }
    }
    
    var defaultIcon: String {
        switch self {
        case .habit: return "repeat.circle"
        case .task: return "checkmark.circle"
        case .goal: return "target"
        case .finance: return "dollarsign.circle"
        case .streak: return "flame"
        case .level: return "star.circle"
        case .social: return "person.2.circle"
        case .milestone: return "flag.circle"
        case .special: return "crown"
        }
    }
    
    var emoji: String {
        switch self {
        case .habit: return "üîÅ"
        case .task: return "‚úÖ"
        case .goal: return "üéØ"
        case .finance: return "üí∞"
        case .streak: return "üî•"
        case .level: return "‚≠ê"
        case .social: return "üë•"
        case .milestone: return "üö©"
        case .special: return "üëë"
        }
    }
}

enum AchievementCategory: String, Codable, CaseIterable {
    case general = "general"
    case productivity = "productivity"
    case health = "health"
    case finance = "finance"
    case social = "social"
    case creative = "creative"
    case learning = "learning"
    case lifestyle = "lifestyle"
    
    var displayName: String {
        switch self {
        case .general: return "–û–±—â–∏–µ"
        case .productivity: return "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
        case .health: return "–ó–¥–æ—Ä–æ–≤—å–µ"
        case .finance: return "–§–∏–Ω–∞–Ω—Å—ã"
        case .social: return "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ"
        case .creative: return "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ"
        case .learning: return "–û–±—É—á–µ–Ω–∏–µ"
        case .lifestyle: return "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏"
        }
    }
}

enum AchievementRarity: String, Codable, CaseIterable {
    case common = "common"
    case uncommon = "uncommon"
    case rare = "rare"
    case epic = "epic"
    case legendary = "legendary"
    
    var displayName: String {
        switch self {
        case .common: return "–û–±—ã—á–Ω–æ–µ"
        case .uncommon: return "–ù–µ–æ–±—ã—á–Ω–æ–µ"
        case .rare: return "–†–µ–¥–∫–æ–µ"
        case .epic: return "–≠–ø–∏—á–µ—Å–∫–æ–µ"
        case .legendary: return "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ"
        }
    }
    
    var color: String {
        switch self {
        case .common: return "#8E8E93"      // Gray
        case .uncommon: return "#34C759"    // Green
        case .rare: return "#007AFF"        // Blue
        case .epic: return "#AF52DE"        // Purple
        case .legendary: return "#FF9500"   // Orange
        }
    }
    
    var experienceMultiplier: Double {
        switch self {
        case .common: return 1.0
        case .uncommon: return 1.5
        case .rare: return 2.0
        case .epic: return 3.0
        case .legendary: return 5.0
        }
    }
}

enum AchievementCriteria: String, Codable, CaseIterable {
    case streakDays = "streak_days"
    case completedHabits = "completed_habits"
    case completedTasks = "completed_tasks"
    case completedGoals = "completed_goals"
    case totalPoints = "total_points"
    case level = "level"
    case daysActive = "days_active"
    case savingsAmount = "savings_amount"
    case spentAmount = "spent_amount"
    case custom = "custom"
    
    var displayName: String {
        switch self {
        case .streakDays: return "–î–Ω–∏ –ø–æ–¥—Ä—è–¥"
        case .completedHabits: return "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏"
        case .completedTasks: return "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"
        case .completedGoals: return "–î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ü–µ–ª–∏"
        case .totalPoints: return "–û–±—â–∏–µ –æ—á–∫–∏"
        case .level: return "–£—Ä–æ–≤–µ–Ω—å"
        case .daysActive: return "–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏"
        case .savingsAmount: return "–°—É–º–º–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π"
        case .spentAmount: return "–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞"
        case .custom: return "–û—Å–æ–±—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π"
        }
    }
}

// MARK: - Predefined Achievements

extension Achievement {
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–∞–±–æ—Ä –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    static func createDefaultAchievements() -> [Achievement] {
        var achievements: [Achievement] = []
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø—Ä–∏–≤—ã—á–∫–∏
        achievements.append(contentsOf: [
            Achievement(
                title: "–ü–µ—Ä–≤—ã–π —à–∞–≥",
                description: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É",
                type: .habit,
                category: .general,
                rarity: .common,
                criteria: .completedHabits,
                targetValue: 1,
                pointsReward: 10,
                experienceReward: 50
            ),
            Achievement(
                title: "–ü—Ä–∏–≤–µ—Ä–∂–µ–Ω–µ—Ü",
                description: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 100 –ø—Ä–∏–≤—ã—á–µ–∫",
                type: .habit,
                category: .productivity,
                rarity: .uncommon,
                criteria: .completedHabits,
                targetValue: 100,
                pointsReward: 100,
                experienceReward: 500
            ),
            Achievement(
                title: "–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫",
                description: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 1000 –ø—Ä–∏–≤—ã—á–µ–∫",
                type: .habit,
                category: .productivity,
                rarity: .rare,
                criteria: .completedHabits,
                targetValue: 1000,
                pointsReward: 500,
                experienceReward: 2000
            )
        ])
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–µ—Ä–∏–∏
        achievements.append(contentsOf: [
            Achievement(
                title: "–ù–µ–¥–µ–ª—è —Å–∏–ª—ã –≤–æ–ª–∏",
                description: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–µ—Ä–∏—é 7 –¥–Ω–µ–π",
                type: .streak,
                category: .productivity,
                rarity: .common,
                criteria: .streakDays,
                targetValue: 7,
                pointsReward: 50,
                experienceReward: 200
            ),
            Achievement(
                title: "–ú–µ—Å—è—Ü –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã",
                description: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–µ—Ä–∏—é 30 –¥–Ω–µ–π",
                type: .streak,
                category: .productivity,
                rarity: .uncommon,
                criteria: .streakDays,
                targetValue: 30,
                pointsReward: 200,
                experienceReward: 800
            ),
            Achievement(
                title: "–ì–æ–¥ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞",
                description: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–µ—Ä–∏—é 365 –¥–Ω–µ–π",
                type: .streak,
                category: .lifestyle,
                rarity: .legendary,
                criteria: .streakDays,
                targetValue: 365,
                pointsReward: 2000,
                experienceReward: 10000,
                isSecret: true
            )
        ])
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∑–∞–¥–∞—á–∏
        achievements.append(contentsOf: [
            Achievement(
                title: "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å",
                description: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 10 –∑–∞–¥–∞—á",
                type: .task,
                category: .productivity,
                rarity: .common,
                criteria: .completedTasks,
                targetValue: 10,
                pointsReward: 20,
                experienceReward: 100
            ),
            Achievement(
                title: "–ú–µ–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                description: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 500 –∑–∞–¥–∞—á",
                type: .task,
                category: .productivity,
                rarity: .rare,
                criteria: .completedTasks,
                targetValue: 500,
                pointsReward: 300,
                experienceReward: 1500
            )
        ])
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ü–µ–ª–∏
        achievements.append(contentsOf: [
            Achievement(
                title: "–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π",
                description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Å–≤–æ–µ–π –ø–µ—Ä–≤–æ–π —Ü–µ–ª–∏",
                type: .goal,
                category: .general,
                rarity: .common,
                criteria: .completedGoals,
                targetValue: 1,
                pointsReward: 100,
                experienceReward: 300
            ),
            Achievement(
                title: "–ü–æ–∫–æ—Ä–∏—Ç–µ–ª—å –≤–µ—Ä—à–∏–Ω",
                description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —Ü–µ–ª–µ–π",
                type: .goal,
                category: .productivity,
                rarity: .uncommon,
                criteria: .completedGoals,
                targetValue: 10,
                pointsReward: 500,
                experienceReward: 1000
            )
        ])
        
        // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements.append(contentsOf: [
            Achievement(
                title: "–ü–µ—Ä–≤—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è",
                description: "–ù–∞–∫–æ–ø–∏—Ç–µ 10,000 —Ä—É–±–ª–µ–π",
                type: .finance,
                category: .finance,
                rarity: .common,
                criteria: .savingsAmount,
                targetValue: 10000,
                pointsReward: 100,
                experienceReward: 500
            ),
            Achievement(
                title: "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞",
                description: "–ù–∞–∫–æ–ø–∏—Ç–µ 100,000 —Ä—É–±–ª–µ–π",
                type: .finance,
                category: .finance,
                rarity: .uncommon,
                criteria: .savingsAmount,
                targetValue: 100000,
                pointsReward: 500,
                experienceReward: 2000
            ),
            Achievement(
                title: "–ú–∏–ª–ª–∏–æ–Ω–µ—Ä",
                description: "–ù–∞–∫–æ–ø–∏—Ç–µ 1,000,000 —Ä—É–±–ª–µ–π",
                type: .finance,
                category: .finance,
                rarity: .legendary,
                criteria: .savingsAmount,
                targetValue: 1000000,
                pointsReward: 5000,
                experienceReward: 20000,
                isSecret: true
            )
        ])
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        achievements.append(contentsOf: [
            Achievement(
                title: "–ù–æ–≤–∏—á–æ–∫",
                description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 5 —É—Ä–æ–≤–Ω—è",
                type: .level,
                category: .general,
                rarity: .common,
                criteria: .level,
                targetValue: 5,
                pointsReward: 50,
                experienceReward: 200
            ),
            Achievement(
                title: "–≠–∫—Å–ø–µ—Ä—Ç",
                description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 25 —É—Ä–æ–≤–Ω—è",
                type: .level,
                category: .productivity,
                rarity: .uncommon,
                criteria: .level,
                targetValue: 25,
                pointsReward: 250,
                experienceReward: 1000
            ),
            Achievement(
                title: "–ì—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 50 —É—Ä–æ–≤–Ω—è",
                type: .level,
                category: .productivity,
                rarity: .epic,
                criteria: .level,
                targetValue: 50,
                pointsReward: 1000,
                experienceReward: 5000
            )
        ])
        
        return achievements
    }
} 