import Foundation
import SwiftData

// MARK: - Motivation Service

protocol MotivationServiceProtocol {
    func generateMotivationalMessage(for user: User) async throws -> MotivationalMessage
    func getMotivationalQuote() async throws -> Quote
    func sendEncouragementNotification(for user: User) async throws
    func generatePersonalizedTip(for user: User) async throws -> PersonalizedTip
    func getCelebrationMessage(for achievement: Achievement) async throws -> CelebrationMessage
    func getStreakMotivation(for habit: Habit) async throws -> StreakMotivation
    func generateComebackMessage(for user: User) async throws -> ComebackMessage
    func scheduleMotivationalReminders(for user: User) async throws
    func getProgressEncouragement(for user: User) async throws -> ProgressEncouragement
    func generateRewardCelebration(for reward: String, user: User) async throws -> RewardCelebration
}

final class MotivationService: MotivationServiceProtocol {
    private let modelContext: ModelContext
    private let notificationService: NotificationServiceProtocol
    private let analyticsService: HabitAnalyticsServiceProtocol?
    
    init(
        modelContext: ModelContext,
        notificationService: NotificationServiceProtocol,
        analyticsService: HabitAnalyticsServiceProtocol? = nil
    ) {
        self.modelContext = modelContext
        self.notificationService = notificationService
        self.analyticsService = analyticsService
    }
    
    func generateMotivationalMessage(for user: User) async throws -> MotivationalMessage {
        let userStats = try await getUserStats(for: user)
        let motivationType = determineMotivationType(for: userStats)
        
        switch motivationType {
        case .encouragement:
            return generateEncouragementMessage(for: user, stats: userStats)
        case .celebration:
            return generateCelebrationMessage(for: user, stats: userStats)
        case .challenge:
            return generateChallengeMessage(for: user, stats: userStats)
        case .support:
            return generateSupportMessage(for: user, stats: userStats)
        case .inspiration:
            return generateInspirationMessage(for: user, stats: userStats)
        }
    }
    
    func getMotivationalQuote() async throws -> Quote {
        let quotes = QuoteDatabase.all
        let randomQuote = quotes.randomElement() ?? QuoteDatabase.default
        
        return Quote(
            text: randomQuote.text,
            author: randomQuote.author,
            category: randomQuote.category,
            mood: randomQuote.mood
        )
    }
    
    func sendEncouragementNotification(for user: User) async throws {
        let message = try await generateMotivationalMessage(for: user)
        
        let content = UNMutableNotificationContent()
        content.title = message.title
        content.body = message.body
        content.sound = .default
        content.categoryIdentifier = "MOTIVATION"
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch message.type {
        case .encouragement:
            content.subtitle = "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è"
        case .celebration:
            content.subtitle = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"
        case .challenge:
            content.subtitle = "üéØ –í—ã–∑–æ–≤"
        case .support:
            content.subtitle = "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        case .inspiration:
            content.subtitle = "‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ"
        }
        
        let identifier = "motivation-\(user.id.uuidString)-\(Date().timeIntervalSince1970)"
        let request = UNNotificationRequest(identifier: identifier, content: content, trigger: nil)
        
        do {
            try await UNUserNotificationCenter.current().add(request)
        } catch {
            print("Failed to send encouragement notification: \(error)")
        }
    }
    
    func generatePersonalizedTip(for user: User) async throws -> PersonalizedTip {
        let userStats = try await getUserStats(for: user)
        let weakestArea = identifyWeakestArea(for: userStats)
        let tip = generateTipForArea(weakestArea, user: user)
        
        return PersonalizedTip(
            title: tip.title,
            content: tip.content,
            category: tip.category,
            difficulty: tip.difficulty,
            estimatedTime: tip.estimatedTime,
            actionSteps: tip.actionSteps
        )
    }
    
    func getCelebrationMessage(for achievement: Achievement) async throws -> CelebrationMessage {
        let celebrationTypes = CelebrationMessageGenerator.messagesForAchievement(achievement)
        let randomCelebration = celebrationTypes.randomElement() ?? CelebrationMessageGenerator.default
        
        return CelebrationMessage(
            title: randomCelebration.title,
            message: randomCelebration.message,
            emoji: randomCelebration.emoji,
            animation: randomCelebration.animation,
            sound: randomCelebration.sound,
            shareText: randomCelebration.shareText
        )
    }
    
    func getStreakMotivation(for habit: Habit) async throws -> StreakMotivation {
        let streakLength = habit.currentStreak
        let motivationLevel = determineStreakMotivationLevel(for: streakLength)
        
        return StreakMotivationGenerator.generate(
            for: habit,
            streakLength: streakLength,
            motivationLevel: motivationLevel
        )
    }
    
    func generateComebackMessage(for user: User) async throws -> ComebackMessage {
        let daysSinceLastActivity = try await calculateDaysSinceLastActivity(for: user)
        let previousStreak = try await getLongestStreak(for: user)
        
        return ComebackMessageGenerator.generate(
            daysSinceLastActivity: daysSinceLastActivity,
            previousStreak: previousStreak,
            userName: user.name
        )
    }
    
    func scheduleMotivationalReminders(for user: User) async throws {
        let userStats = try await getUserStats(for: user)
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if userStats.averageCompletionRate < 0.5 {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏
            await scheduleFrequentReminders(for: user)
        } else if userStats.averageCompletionRate > 0.8 {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            await scheduleWeeklyReminders(for: user)
        } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await scheduleStandardReminders(for: user)
        }
    }
    
    func getProgressEncouragement(for user: User) async throws -> ProgressEncouragement {
        let userStats = try await getUserStats(for: user)
        let progressType = determineProgressType(for: userStats)
        
        return ProgressEncouragementGenerator.generate(
            for: user,
            stats: userStats,
            progressType: progressType
        )
    }
    
    func generateRewardCelebration(for reward: String, user: User) async throws -> RewardCelebration {
        return RewardCelebrationGenerator.generate(
            reward: reward,
            userName: user.name,
            userLevel: user.level
        )
    }
    
    // MARK: - Private Methods
    
    private func getUserStats(for user: User) async throws -> UserStats {
        let calendar = Calendar.current
        let last30Days = calendar.date(byAdding: .day, value: -30, to: Date()) ?? Date()
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        let habitCompletions = user.habits.flatMap { $0.entries }
            .filter { $0.date >= last30Days && $0.isCompleted }
            .count
        
        let taskCompletions = user.tasks
            .filter { $0.status == .completed && $0.updatedAt >= last30Days }
            .count
        
        let activeDays = try await calculateActiveDays(for: user, since: last30Days)
        let averageCompletionRate = try await calculateAverageCompletionRate(for: user)
        let longestStreak = user.habits.map { $0.longestStreak }.max() ?? 0
        let currentStreak = user.habits.map { $0.currentStreak }.max() ?? 0
        
        return UserStats(
            habitCompletions: habitCompletions,
            taskCompletions: taskCompletions,
            activeDays: activeDays,
            averageCompletionRate: averageCompletionRate,
            longestStreak: longestStreak,
            currentStreak: currentStreak,
            totalXP: user.totalXP,
            totalPoints: user.totalPoints,
            level: user.level
        )
    }
    
    private func determineMotivationType(for stats: UserStats) -> MotivationType {
        if stats.currentStreak == 0 && stats.longestStreak > 7 {
            return .support // –ü–æ—Ç–µ—Ä—è–ª —Å–µ—Ä–∏—é
        } else if stats.currentStreak > stats.longestStreak {
            return .celebration // –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥
        } else if stats.averageCompletionRate < 0.3 {
            return .encouragement // –ù—É–∂–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è
        } else if stats.averageCompletionRate > 0.8 {
            return .challenge // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–∑–æ–≤
        } else {
            return .inspiration // –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ
        }
    }
    
    private func generateEncouragementMessage(for user: User, stats: UserStats) -> MotivationalMessage {
        let messages = [
            MotivationalMessage(
                type: .encouragement,
                title: "–ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!",
                body: "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ. –í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, \(user.name)!",
                actionText: "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É",
                iconName: "heart.fill"
            ),
            MotivationalMessage(
                type: .encouragement,
                title: "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–∞–∂–Ω—ã",
                body: "–ü—Ä–æ–≥—Ä–µ—Å—Å - —ç—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–µ —Å–∫–∞—á–∫–∏. –ò–Ω–æ–≥–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —à–∞–≥–∞.",
                actionText: "–°–¥–µ–ª–∞—Ç—å —à–∞–≥",
                iconName: "figure.walk"
            ),
            MotivationalMessage(
                type: .encouragement,
                title: "–í–µ—Ä—å—Ç–µ –≤ —Å–µ–±—è",
                body: "–£ –≤–∞—Å –µ—Å—Ç—å —Å–∏–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                actionText: "–ù–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å",
                iconName: "star.fill"
            )
        ]
        
        return messages.randomElement() ?? messages[0]
    }
    
    private func generateCelebrationMessage(for user: User, stats: UserStats) -> MotivationalMessage {
        return MotivationalMessage(
            type: .celebration,
            title: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
            body: "–í—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –í–∞—à–∞ —Å–µ—Ä–∏—è –∏–∑ \(stats.currentStreak) –¥–Ω–µ–π –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç!",
            actionText: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
            iconName: "party.popper.fill"
        )
    }
    
    private func generateChallengeMessage(for user: User, stats: UserStats) -> MotivationalMessage {
        return MotivationalMessage(
            type: .challenge,
            title: "–ù–æ–≤—ã–π –≤—ã–∑–æ–≤!",
            body: "–í—ã –≥–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –≤—ã—Å–æ—Ç–∞–º? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É!",
            actionText: "–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤",
            iconName: "target"
        )
    }
    
    private func generateSupportMessage(for user: User, stats: UserStats) -> MotivationalMessage {
        return MotivationalMessage(
            type: .support,
            title: "–ú—ã —Å –≤–∞–º–∏",
            body: "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å –∏–∑-–∑–∞ –Ω–µ—É–¥–∞—á. –í–∞–∂–Ω–æ –≤—Å—Ç–∞—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥.",
            actionText: "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
            iconName: "hands.sparkles.fill"
        )
    }
    
    private func generateInspirationMessage(for user: User, stats: UserStats) -> MotivationalMessage {
        return MotivationalMessage(
            type: .inspiration,
            title: "–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–Ω—è",
            body: "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –¥–µ—Ä–µ–≤–∞ –±—ã–ª–æ 20 –ª–µ—Ç –Ω–∞–∑–∞–¥. –í—Ç–æ—Ä–æ–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è - —Å–µ–π—á–∞—Å.",
            actionText: "–î–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å",
            iconName: "lightbulb.fill"
        )
    }
    
    private func identifyWeakestArea(for stats: UserStats) -> WeakArea {
        if stats.habitCompletions < 10 {
            return .habitConsistency
        } else if stats.taskCompletions < 5 {
            return .taskManagement
        } else if stats.currentStreak < 3 {
            return .streakBuilding
        } else {
            return .motivation
        }
    }
    
    private func generateTipForArea(_ area: WeakArea, user: User) -> TipContent {
        switch area {
        case .habitConsistency:
            return TipContent(
                title: "–°–æ–≤–µ—Ç –ø–æ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤—É",
                content: "–ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –≤—Å–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã –≤ –¥–µ–Ω—å. –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏.",
                category: "–ü—Ä–∏–≤—ã—á–∫–∏",
                difficulty: .easy,
                estimatedTime: 2,
                actionSteps: [
                    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –ø—Ä–æ—Å—Ç—É—é –ø—Ä–∏–≤—ã—á–∫—É",
                    "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ",
                    "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –µ—ë –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è",
                    "–û—Ç–º–µ—á–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
                ]
            )
        case .taskManagement:
            return TipContent(
                title: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏",
                content: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ 2 –º–∏–Ω—É—Ç: –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–π–º–µ—Ç –º–µ–Ω—å—à–µ 2 –º–∏–Ω—É—Ç, —Å–¥–µ–ª–∞–π—Ç–µ –µ—ë —Å—Ä–∞–∑—É.",
                category: "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                difficulty: .medium,
                estimatedTime: 5,
                actionSteps: [
                    "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
                    "–ù–∞–π–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã",
                    "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ",
                    "–û—Ç–º–µ—Ç—å—Ç–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"
                ]
            )
        case .streakBuilding:
            return TipContent(
                title: "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Ä–∏–π",
                content: "–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Å–µ—Ä–∏—é. –õ—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –º–∏–Ω–∏–º—É–º, —á–µ–º –Ω–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ.",
                category: "–ú–æ—Ç–∏–≤–∞—Ü–∏—è",
                difficulty: .medium,
                estimatedTime: 3,
                actionSteps: [
                    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É",
                    "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–ª–∞–Ω–∫—É",
                    "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –¥–∞–∂–µ –≤ —Ç—Ä—É–¥–Ω—ã–µ –¥–Ω–∏",
                    "–ü—Ä–∞–∑–¥–Ω—É–π—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å–µ—Ä–∏–∏"
                ]
            )
        case .motivation:
            return TipContent(
                title: "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏",
                content: "–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, –∫–∞–∫–∏–º –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ –≥–æ–¥ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.",
                category: "–ú–æ—Ç–∏–≤–∞—Ü–∏—è",
                difficulty: .easy,
                estimatedTime: 5,
                actionSteps: [
                    "–ó–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏",
                    "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ–∞–ª—å–Ω—É—é –∂–∏–∑–Ω—å",
                    "–ü–æ–¥—É–º–∞–π—Ç–µ –æ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ",
                    "–°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ—Ç —à–∞–≥ —Å–µ–≥–æ–¥–Ω—è"
                ]
            )
        }
    }
    
    private func calculateActiveDays(for user: User, since date: Date) async throws -> Int {
        let calendar = Calendar.current
        var activeDays = 0
        var currentDate = date
        
        while currentDate <= Date() {
            let hasActivity = await hasUserActivity(on: currentDate, for: user)
            if hasActivity {
                activeDays += 1
            }
            currentDate = calendar.date(byAdding: .day, value: 1, to: currentDate) ?? currentDate
        }
        
        return activeDays
    }
    
    private func calculateAverageCompletionRate(for user: User) async throws -> Double {
        let activeHabits = user.habits.filter { $0.isActive }
        guard !activeHabits.isEmpty else { return 0.0 }
        
        let totalCompletionRates = activeHabits.map { habit in
            let totalEntries = habit.entries.count
            let completedEntries = habit.entries.filter { $0.isCompleted }.count
            return totalEntries > 0 ? Double(completedEntries) / Double(totalEntries) : 0.0
        }
        
        return totalCompletionRates.reduce(0, +) / Double(totalCompletionRates.count)
    }
    
    private func calculateDaysSinceLastActivity(for user: User) async throws -> Int {
        let calendar = Calendar.current
        let today = Date()
        
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        var currentDate = today
        var daysSince = 0
        
        for _ in 0..<30 { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            if await hasUserActivity(on: currentDate, for: user) {
                return daysSince
            }
            currentDate = calendar.date(byAdding: .day, value: -1, to: currentDate) ?? currentDate
            daysSince += 1
        }
        
        return daysSince
    }
    
    private func getLongestStreak(for user: User) async throws -> Int {
        return user.habits.map { $0.longestStreak }.max() ?? 0
    }
    
    private func hasUserActivity(on date: Date, for user: User) async -> Bool {
        let calendar = Calendar.current
        let startOfDay = calendar.startOfDay(for: date)
        let endOfDay = calendar.date(byAdding: .day, value: 1, to: startOfDay) ?? startOfDay
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø—Ä–∏–≤—ã—á–∫–∞—Ö
        let habitActivity = user.habits.contains { habit in
            habit.entries.contains { entry in
                entry.date >= startOfDay && entry.date < endOfDay && entry.isCompleted
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∑–∞–¥–∞—á–∞—Ö
        let taskActivity = user.tasks.contains { task in
            task.status == .completed && task.updatedAt >= startOfDay && task.updatedAt < endOfDay
        }
        
        return habitActivity || taskActivity
    }
    
    private func scheduleFrequentReminders(for user: User) async {
        // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        let content = UNMutableNotificationContent()
        content.title = "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö"
        content.body = "–î–∞–∂–µ –æ–¥–∏–Ω –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —É—Å–ø–µ—Ö—É!"
        content.sound = .default
        content.categoryIdentifier = "DAILY_MOTIVATION"
        
        let trigger = UNCalendarNotificationTrigger(
            dateMatching: DateComponents(hour: 19, minute: 0),
            repeats: true
        )
        
        let request = UNNotificationRequest(
            identifier: "daily-motivation-\(user.id.uuidString)",
            content: content,
            trigger: trigger
        )
        
        do {
            try await UNUserNotificationCenter.current().add(request)
        } catch {
            print("Failed to schedule daily reminders: \(error)")
        }
    }
    
    private func scheduleWeeklyReminders(for user: User) async {
        // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        let content = UNMutableNotificationContent()
        content.title = "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è"
        content.body = "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Å–≤–æ–∏–º —Ü–µ–ª—è–º!"
        content.sound = .default
        content.categoryIdentifier = "WEEKLY_MOTIVATION"
        
        let trigger = UNCalendarNotificationTrigger(
            dateMatching: DateComponents(weekday: 2, hour: 9, minute: 0), // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 9:00
            repeats: true
        )
        
        let request = UNNotificationRequest(
            identifier: "weekly-motivation-\(user.id.uuidString)",
            content: content,
            trigger: trigger
        )
        
        do {
            try await UNUserNotificationCenter.current().add(request)
        } catch {
            print("Failed to schedule weekly reminders: \(error)")
        }
    }
    
    private func scheduleStandardReminders(for user: User) async {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é
        let days = [2, 4, 6] // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥–∞, –ø—è—Ç–Ω–∏—Ü–∞
        
        for day in days {
            let content = UNMutableNotificationContent()
            content.title = "–í—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–≤—ã—á–µ–∫"
            content.body = "–ö–∞–∫ –¥–µ–ª–∞ —Å –≤–∞—à–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏? –ù–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ª—É—á—à–µ, —á–µ–º –Ω–∏–∫–∞–∫–æ–≥–æ!"
            content.sound = .default
            content.categoryIdentifier = "STANDARD_MOTIVATION"
            
            let trigger = UNCalendarNotificationTrigger(
                dateMatching: DateComponents(weekday: day, hour: 18, minute: 0),
                repeats: true
            )
            
            let request = UNNotificationRequest(
                identifier: "standard-motivation-\(day)-\(user.id.uuidString)",
                content: content,
                trigger: trigger
            )
            
            do {
                try await UNUserNotificationCenter.current().add(request)
            } catch {
                print("Failed to schedule standard reminders: \(error)")
            }
        }
    }
    
    private func determineStreakMotivationLevel(for streakLength: Int) -> StreakMotivationLevel {
        switch streakLength {
        case 0: return .restart
        case 1...6: return .building
        case 7...20: return .strong
        case 21...59: return .impressive
        case 60...179: return .legendary
        default: return .mythical
        }
    }
    
    private func determineProgressType(for stats: UserStats) -> ProgressType {
        let recentProgress = stats.averageCompletionRate
        
        if recentProgress > 0.8 {
            return .excellent
        } else if recentProgress > 0.6 {
            return .good
        } else if recentProgress > 0.4 {
            return .moderate
        } else {
            return .needsImprovement
        }
    }
}

// MARK: - Supporting Types

struct UserStats {
    let habitCompletions: Int
    let taskCompletions: Int
    let activeDays: Int
    let averageCompletionRate: Double
    let longestStreak: Int
    let currentStreak: Int
    let totalXP: Int
    let totalPoints: Int
    let level: Int
}

enum MotivationType {
    case encouragement
    case celebration
    case challenge
    case support
    case inspiration
}

enum WeakArea {
    case habitConsistency
    case taskManagement
    case streakBuilding
    case motivation
}

enum StreakMotivationLevel {
    case restart
    case building
    case strong
    case impressive
    case legendary
    case mythical
}

enum ProgressType {
    case excellent
    case good
    case moderate
    case needsImprovement
}

struct MotivationalMessage {
    let type: MotivationType
    let title: String
    let body: String
    let actionText: String
    let iconName: String
}

struct Quote {
    let text: String
    let author: String
    let category: String
    let mood: String
}

struct PersonalizedTip {
    let title: String
    let content: String
    let category: String
    let difficulty: Difficulty
    let estimatedTime: Int
    let actionSteps: [String]
    
    enum Difficulty {
        case easy
        case medium
        case hard
    }
}

struct TipContent {
    let title: String
    let content: String
    let category: String
    let difficulty: PersonalizedTip.Difficulty
    let estimatedTime: Int
    let actionSteps: [String]
}

struct CelebrationMessage {
    let title: String
    let message: String
    let emoji: String
    let animation: String
    let sound: String
    let shareText: String
}

struct StreakMotivation {
    let title: String
    let message: String
    let encouragement: String
    let nextMilestone: Int
    let motivationLevel: StreakMotivationLevel
}

struct ComebackMessage {
    let title: String
    let message: String
    let encouragement: String
    let actionText: String
    let iconName: String
}

struct ProgressEncouragement {
    let title: String
    let message: String
    let progressType: ProgressType
    let suggestions: [String]
    let nextGoal: String
}

struct RewardCelebration {
    let title: String
    let message: String
    let animation: String
    let sound: String
    let shareText: String
}

// MARK: - Message Generators

struct QuoteDatabase {
    static let all: [Quote] = [
        Quote(text: "–ù–µ –≤–∞–∂–Ω–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã –∏–¥–µ—Ç–µ, –ø–æ–∫–∞ –≤—ã –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ—Å—å.", author: "–ö–æ–Ω—Ñ—É—Ü–∏–π", category: "–ú–æ—Ç–∏–≤–∞—Ü–∏—è", mood: "–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π"),
        Quote(text: "–£—Å–ø–µ—Ö - —ç—Ç–æ —Å—É–º–º–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö —É—Å–∏–ª–∏–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã—Ö –¥–µ–Ω—å –∑–∞ –¥–Ω–µ–º.", author: "–†–æ–±–µ—Ä—Ç –ö–æ–ª—å–µ—Ä", category: "–ü—Ä–∏–≤—ã—á–∫–∏", mood: "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π"),
        Quote(text: "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –¥–µ—Ä–µ–≤–∞ –±—ã–ª–æ 20 –ª–µ—Ç –Ω–∞–∑–∞–¥. –í—Ç–æ—Ä–æ–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è - —Å–µ–π—á–∞—Å.", author: "–ö–∏—Ç–∞–π—Å–∫–∞—è –ø–æ—Å–ª–æ–≤–∏—Ü–∞", category: "–î–µ–π—Å—Ç–≤–∏–µ", mood: "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π"),
        Quote(text: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ, –Ω–æ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–∞–º, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, –∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ü–æ–≤–∫—É.", author: "–ö.–°. –õ—å—é–∏—Å", category: "–ò–∑–º–µ–Ω–µ–Ω–∏—è", mood: "–ù–∞–¥–µ–∂–¥–∞"),
        Quote(text: "–ú–æ—Ç–∏–≤–∞—Ü–∏—è - —ç—Ç–æ —Ç–æ, —á—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞—Å –Ω–∞—á–∞—Ç—å. –ü—Ä–∏–≤—ã—á–∫–∞ - —ç—Ç–æ —Ç–æ, —á—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞—Å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.", author: "–î–∂–∏–º –†–æ–Ω", category: "–ü—Ä–∏–≤—ã—á–∫–∏", mood: "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π")
    ]
    
    static let `default` = Quote(text: "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ.", author: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", category: "–ú–æ—Ç–∏–≤–∞—Ü–∏—è", mood: "–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π")
}

struct CelebrationMessageGenerator {
    static func messagesForAchievement(_ achievement: Achievement) -> [CelebrationMessage] {
        switch achievement.rarity {
        case .common:
            return [
                CelebrationMessage(
                    title: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
                    message: "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '\(achievement.name)'!",
                    emoji: "üéâ",
                    animation: "confetti",
                    sound: "celebration",
                    shareText: "–Ø —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '\(achievement.name)' –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ!"
                )
            ]
        case .legendary:
            return [
                CelebrationMessage(
                    title: "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!",
                    message: "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å '\(achievement.name)'!",
                    emoji: "üëë",
                    animation: "fireworks",
                    sound: "epic_celebration",
                    shareText: "–Ø –¥–æ—Å—Ç–∏–≥ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è '\(achievement.name)'! üëë"
                )
            ]
        default:
            return [
                CelebrationMessage(
                    title: "–û—Ç–ª–∏—á–Ω–æ!",
                    message: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '\(achievement.name)' —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!",
                    emoji: "‚≠ê",
                    animation: "sparkles",
                    sound: "achievement",
                    shareText: "–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: '\(achievement.name)' ‚≠ê"
                )
            ]
        }
    }
    
    static let `default` = CelebrationMessage(
        title: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
        message: "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
        emoji: "üéâ",
        animation: "confetti",
        sound: "celebration",
        shareText: "–Ø –ø–æ–ª—É—á–∏–ª –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!"
    )
}

struct StreakMotivationGenerator {
    static func generate(for habit: Habit, streakLength: Int, motivationLevel: StreakMotivationLevel) -> StreakMotivation {
        switch motivationLevel {
        case .restart:
            return StreakMotivation(
                title: "–ù–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ",
                message: "–ö–∞–∂–¥—ã–π —ç–∫—Å–ø–µ—Ä—Ç –∫–æ–≥–¥–∞-—Ç–æ –±—ã–ª –Ω–æ–≤–∏—á–∫–æ–º. –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ—é —Å–µ—Ä–∏—é –∑–∞–Ω–æ–≤–æ!",
                encouragement: "–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π. –í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!",
                nextMilestone: 7,
                motivationLevel: .restart
            )
        case .building:
            return StreakMotivation(
                title: "–ù–∞–±–∏—Ä–∞–µ–º –æ–±–æ—Ä–æ—Ç—ã",
                message: "–°–µ—Ä–∏—è –∏–∑ \(streakLength) –¥–Ω–µ–π - –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ –Ω–µ–¥–µ–ª–µ.",
                encouragement: "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏. –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å!",
                nextMilestone: 7,
                motivationLevel: .building
            )
        case .strong:
            return StreakMotivation(
                title: "–°–∏–ª—å–Ω–∞—è —Å–µ—Ä–∏—è",
                message: "\(streakLength) –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ - —ç—Ç–æ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç! –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –º–µ—Å—è—Ü—É.",
                encouragement: "–í—ã –¥–æ–∫–∞–∑–∞–ª–∏, —á—Ç–æ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!",
                nextMilestone: 30,
                motivationLevel: .strong
            )
        case .impressive:
            return StreakMotivation(
                title: "–í–ø–µ—á–∞—Ç–ª—è—é—â–∞—è —Å–µ—Ä–∏—è",
                message: "\(streakLength) –¥–Ω–µ–π - —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ 60 –¥–Ω—è–º.",
                encouragement: "–í—ã –≤ –∑–æ–Ω–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞! –≠—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–∞—Å—Ç—å—é –≤–∞—Å.",
                nextMilestone: 60,
                motivationLevel: .impressive
            )
        case .legendary:
            return StreakMotivation(
                title: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ä–∏—è",
                message: "\(streakLength) –¥–Ω–µ–π - –≤—ã –ª–µ–≥–µ–Ω–¥–∞! –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –ø–æ–ª—É–≥–æ–¥—É.",
                encouragement: "–í—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç–µ –¥—Ä—É–≥–∏—Ö —Å–≤–æ–∏–º –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ–º!",
                nextMilestone: 180,
                motivationLevel: .legendary
            )
        case .mythical:
            return StreakMotivation(
                title: "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å–µ—Ä–∏—è",
                message: "\(streakLength) –¥–Ω–µ–π - —ç—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í—ã –º–∞—Å—Ç–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫.",
                encouragement: "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è, –æ –∫–æ—Ç–æ—Ä–æ–º –º–µ—á—Ç–∞—é—Ç –º–Ω–æ–≥–∏–µ!",
                nextMilestone: 365,
                motivationLevel: .mythical
            )
        }
    }
}

struct ComebackMessageGenerator {
    static func generate(daysSinceLastActivity: Int, previousStreak: Int, userName: String) -> ComebackMessage {
        if daysSinceLastActivity <= 3 {
            return ComebackMessage(
                title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!",
                message: "–ú—ã —Å–∫—É—á–∞–ª–∏ –ø–æ –≤–∞–º, \(userName)! –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å –∫ —Å–≤–æ–∏–º —Ü–µ–ª—è–º?",
                encouragement: "–ù–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ - –≤–µ—Ä–Ω—É—Ç—å—Å—è!",
                actionText: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                iconName: "hand.wave.fill"
            )
        } else if daysSinceLastActivity <= 7 {
            return ComebackMessage(
                title: "–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è!",
                message: "–ù–µ–¥–µ–ª—è –ø—Ä–æ—à–ª–∞ –±—ã—Å—Ç—Ä–æ. –î–∞–≤–∞–π—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –≤–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏!",
                encouragement: "–ü–æ–º–Ω–∏—Ç–µ –≤–∞—à—É —Å–µ—Ä–∏—é –∏–∑ \(previousStreak) –¥–Ω–µ–π? –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ!",
                actionText: "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
                iconName: "arrow.clockwise"
            )
        } else {
            return ComebackMessage(
                title: "–ú—ã –≤–∞—Å –∂–¥–∞–ª–∏!",
                message: "–ü—Ä–æ—à–ª–æ —É–∂–µ \(daysSinceLastActivity) –¥–Ω–µ–π. –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤–æ–º—É —Å—Ç–∞—Ä—Ç—É?",
                encouragement: "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å. –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ!",
                actionText: "–ù–æ–≤—ã–π —Å—Ç–∞—Ä—Ç",
                iconName: "sunrise.fill"
            )
        }
    }
}

struct ProgressEncouragementGenerator {
    static func generate(for user: User, stats: UserStats, progressType: ProgressType) -> ProgressEncouragement {
        switch progressType {
        case .excellent:
            return ProgressEncouragement(
                title: "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!",
                message: "–í—ã –Ω–∞ –≤–µ—Ä—à–∏–Ω–µ —Å–≤–æ–µ–π —Ñ–æ—Ä–º—ã! –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è \(Int(stats.averageCompletionRate * 100))%",
                progressType: .excellent,
                suggestions: [
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É",
                    "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏",
                    "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ–ª–µ–µ –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–µ —Ü–µ–ª–∏"
                ],
                nextGoal: "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞"
            )
        case .good:
            return ProgressEncouragement(
                title: "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!",
                message: "–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è \(Int(stats.averageCompletionRate * 100))%",
                progressType: .good,
                suggestions: [
                    "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –±–æ–ª–µ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏",
                    "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–Ω–µ–π",
                    "–ü—Ä–∞–∑–¥–Ω—É–π—Ç–µ –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–±–µ–¥—ã"
                ],
                nextGoal: "–ü–æ–¥–Ω—è—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ 80%"
            )
        case .moderate:
            return ProgressEncouragement(
                title: "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å—Ç–∞—Ä–∞—Ç—å—Å—è!",
                message: "–ï—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è \(Int(stats.averageCompletionRate * 100))%",
                progressType: .moderate,
                suggestions: [
                    "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –æ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–µ",
                    "–£–º–µ–Ω—å—à–∏—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É –¥–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è",
                    "–ù–∞–π–¥–∏—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏—é –≤ –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø–æ–±–µ–¥–∞—Ö"
                ],
                nextGoal: "–ü–æ–¥–Ω—è—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ 60%"
            )
        case .needsImprovement:
            return ProgressEncouragement(
                title: "–í—Ä–µ–º—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!",
                message: "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ö–∞–∂–¥—ã–π –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
                progressType: .needsImprovement,
                suggestions: [
                    "–ù–∞—á–Ω–∏—Ç–µ —Å –æ–¥–Ω–æ–π –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏",
                    "–°–¥–µ–ª–∞–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–µ–≥–∫–∏–º–∏",
                    "–°–≤—è–∂–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏"
                ],
                nextGoal: "–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"
            )
        }
    }
}

struct RewardCelebrationGenerator {
    static func generate(reward: String, userName: String, userLevel: Int) -> RewardCelebration {
        return RewardCelebration(
            title: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!",
            message: "\(userName), –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ '\(reward)'! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!",
            animation: "reward_celebration",
            sound: "reward_sound",
            shareText: "–Ø –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É '\(reward)' –∑–∞ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
        )
    }
} 