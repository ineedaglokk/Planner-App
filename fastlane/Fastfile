# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SCHEME = "IWBB"
WORKSPACE = "IWBB.xcworkspace"
PROJECT = "IWBB/IWBB.xcodeproj"

platform :ios do

  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
  before_all do
    ensure_env_vars(
      env_vars: ['FASTLANE_USER', 'FASTLANE_PASSWORD']
    ) if is_ci
    
    puts "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ø—Ä–æ–µ–∫—Ç–æ–º #{SCHEME}"
    puts "üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: iOS"
    puts "üîß Workspace: #{WORKSPACE}"
  end

  # –û—á–∏—Å—Ç–∫–∞ build –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  desc "–û—á–∏—Å—Ç–∏—Ç—å build –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
  lane :clean do
    clear_derived_data
    clean_build_artifacts_and_derived_data
  end

  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  desc "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
  lane :bootstrap do
    # SPM packages resolve
    sh("cd .. && xcodebuild -resolvePackageDependencies -workspace #{WORKSPACE} -scheme #{SCHEME}")
    
    # SwiftLint —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç
    begin
      sh("which swiftlint")
    rescue
      sh("brew install swiftlint")
    end
    
    puts "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
  end

  # –õ–∏–Ω—Ç–∏–Ω–≥ –∫–æ–¥–∞
  desc "–ó–∞–ø—É—Å—Ç–∏—Ç—å SwiftLint –ø—Ä–æ–≤–µ—Ä–∫—É"
  lane :lint do
    swiftlint(
      mode: :lint,
      config_file: ".swiftlint.yml",
      strict: true,
      raise_if_swiftlint_error: true
    )
  end

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  desc "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"
  lane :test do
    run_tests(
      workspace: WORKSPACE,
      scheme: SCHEME,
      devices: ["iPhone 15 Pro", "iPad Pro (12.9-inch) (6th generation)"],
      clean: true,
      code_coverage: true,
      derived_data_path: "./build/DerivedData",
      result_bundle: true,
      output_directory: "./build/test_output"
    )
  end

  # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (lint + test)
  desc "–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: lint + test"
  lane :check do
    lint
    test
    puts "‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞"
  end

  # –°–±–æ—Ä–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  desc "–°–±–æ—Ä–∫–∞ Debug –≤–µ—Ä—Å–∏–∏"
  lane :build_debug do
    gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Debug",
      build_path: "./build",
      archive_path: "./build/IWBB-Debug.xcarchive",
      export_method: "development",
      skip_package_ipa: true,
      clean: true
    )
  end

  # –°–±–æ—Ä–∫–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞
  desc "–°–±–æ—Ä–∫–∞ Release –≤–µ—Ä—Å–∏–∏"
  lane :build_release do
    ensure_git_status_clean unless skip_git_status_check
    
    gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Release",
      build_path: "./build",
      archive_path: "./build/IWBB-Release.xcarchive",
      export_method: "app-store",
      clean: true,
      include_bitcode: false,
      include_symbols: true,
      export_options: {
        stripSwiftSymbols: true,
        uploadBitcode: false,
        uploadSymbols: true,
        compileBitcode: false
      }
    )
  end

  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
  desc "–£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
  lane :bump_version do |options|
    bump_type = options[:type] || "patch" # patch, minor, major
    
    case bump_type
    when "major"
      increment_version_number(bump_type: "major")
    when "minor"
      increment_version_number(bump_type: "minor")
    else
      increment_version_number(bump_type: "patch")
    end
    
    increment_build_number
    
    version = get_version_number
    build = get_build_number
    
    puts "üìà –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: #{version} (#{build})"
    
    # –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–µ—Ä—Å–∏–∏
    git_add(path: PROJECT)
    git_commit(
      path: PROJECT,
      message: "chore: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –¥–æ #{version} (#{build})"
    )
    
    add_git_tag(tag: "v#{version}-#{build}")
  end

  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–µ–ª–∏–∑—É
  desc "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–µ–ª–∏–∑—É"
  lane :prepare_release do |options|
    ensure_git_branch(branch: 'main')
    ensure_git_status_clean
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    lint
    test
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
    bump_version(type: options[:type])
    
    # –°–±–æ—Ä–∫–∞
    build_release
    
    puts "üéâ –†–µ–ª–∏–∑ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω!"
    puts "üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    puts "   1. git push origin main --tags"
    puts "   2. –°–æ–∑–¥–∞—Ç—å Release –Ω–∞ GitHub"
  end

  # CI —Å–±–æ—Ä–∫–∞
  desc "CI —Å–±–æ—Ä–∫–∞"
  lane :ci_build do
    setup_ci if is_ci
    
    clean
    bootstrap
    lint
    test
    build_debug
    
    puts "‚úÖ CI —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
  end

  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
  desc "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è App Store"
  lane :screenshots do
    capture_screenshots(
      workspace: WORKSPACE,
      scheme: SCHEME
    )
  end

  # –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞
  desc "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞"
  lane :coverage do
    run_tests(
      workspace: WORKSPACE,
      scheme: SCHEME,
      code_coverage: true,
      derived_data_path: "./build/DerivedData"
    )
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    sh("cd .. && xcrun xccov view --report ./build/DerivedData/Logs/Test/*.xcresult")
  end

  # –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  after_all do |lane|
    puts "‚úÖ Lane '#{lane}' –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    # slack(
    #   message: "iOS Build –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è lane: #{lane}",
    #   success: true
    # ) if ENV['SLACK_URL']
  end

  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  error do |lane, exception|
    puts "‚ùå –û—à–∏–±–∫–∞ –≤ lane '#{lane}': #{exception.message}"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    # slack(
    #   message: "iOS Build failed for lane: #{lane}. Error: #{exception.message}",
    #   success: false
    # ) if ENV['SLACK_URL']
  end
end

platform :mac do
  
  # macOS —Å–±–æ—Ä–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  desc "–°–±–æ—Ä–∫–∞ macOS Debug –≤–µ—Ä—Å–∏–∏"
  lane :build_debug do
    gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Debug",
      destination: "generic/platform=macOS",
      build_path: "./build",
      archive_path: "./build/IWBB-macOS-Debug.xcarchive",
      skip_package_ipa: true,
      clean: true
    )
  end

  # macOS —Å–±–æ—Ä–∫–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞
  desc "–°–±–æ—Ä–∫–∞ macOS Release –≤–µ—Ä—Å–∏–∏"
  lane :build_release do
    gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Release",
      destination: "generic/platform=macOS",
      build_path: "./build",
      archive_path: "./build/IWBB-macOS-Release.xcarchive",
      clean: true
    )
  end

  # macOS —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  desc "–ó–∞–ø—É—Å—Ç–∏—Ç—å macOS —Ç–µ—Å—Ç—ã"
  lane :test do
    run_tests(
      workspace: WORKSPACE,
      scheme: SCHEME,
      destination: "platform=macOS",
      clean: true,
      code_coverage: true
    )
  end

end

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def skip_git_status_check
  ENV['SKIP_GIT_STATUS_CHECK'] == 'true'
end 